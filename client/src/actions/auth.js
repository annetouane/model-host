import api from "../utilities/api";
import { setAlert } from "./alert";
import setAuthToken from "../utilities/setAuthToken";
import {
  REGISTER_SUCCESS,
  REGISTER_FAIL,
  USER_LOADED,
  AUTH_ERROR,
  LOGIN_SUCCESS,
  LOGIN_FAIL,
  LOGOUT,
} from "./types";

// load the user each time the main app is updated to check authentication
export const loadUser = () => async (dispatch) => {
  if (localStorage.token) {
    // if there is a token in local storage,
    // sends the token in global header by calling the function setAuthToken
    setAuthToken(localStorage.token);
  }

  try {
    const res = await api.get("http://localhost:5000/");

    dispatch({
      type: USER_LOADED,
      payload: res.data,
    });
  } catch (err) {
    console.log(err.message);
    dispatch({
      type: AUTH_ERROR,
    });
  }
};

// Register User
export const register = (formData) => async (dispatch) => {
  try {
    // get the server's response
    const res = await api.post("/signup", formData);
    console.log(res.data);
    // if the is a success -> dispatch REGISTER_SUCCESS
    // attach the response to the playload
    dispatch(
      setAlert(
        `A validation link has been sent to : ${res.data.email}`,
        "success",
        10000
      )
    );
    dispatch({
      type: REGISTER_SUCCESS,
      // pass the token in the payload
    });
  } catch (err) {
    // display the errors (the array of errors called "errors")
    const errors = err.response.data.errors;

    if (errors) {
      // if there are any error : for each error dispatch the set alert with the error message
      // the array of errors generated by the server
      errors.forEach((error) => dispatch(setAlert(error.msg, "red")));
    }

    dispatch({
      type: REGISTER_FAIL,
    });
  }
};

// Login User
export const login = (email, password) => async (dispatch) => {
  const body = { email, password };

  try {
    // sends back the user
    const res = await api.post("/signin", body);
    console.log(res.data);

    dispatch({
      type: LOGIN_SUCCESS,
      // insert the user in the payload
      payload: res.data,
    });

    dispatch(loadUser());
  } catch (err) {
    const errors = err.response.data.errors;
    if (errors) {
      // if there are any error : dispatch the set alert with the error message and the type of error (color)
      errors.forEach((error) => dispatch(setAlert(error.msg, "red")));
    }

    dispatch({
      type: LOGIN_FAIL,
    });
  }
};

// Logout
export const logout = () => (dispatch) => {
  dispatch({ type: LOGOUT });
};

// Mot de passe oublié : envoi email
export const forgotten = (email) => async (dispatch) => {
  const body = { email };

  try {
    // get the server's response
    await api.post("/signin/forgotten", body);
    // if the is a success -> dispatch REGISTER_SUCCESS
    // attach the response to the playload
    dispatch(
      setAlert(
        `A link to reset your password has been sent to : ${email}`,
        "success",
        5000
      )
    );
  } catch (err) {
    // display the errors (the array of errors called "errors")
    const errors = err.response.data.errors;

    if (errors) {
      // if there are any error : for each error dispatch the set alert with the error message
      // the array of errors generated by the server
      errors.forEach((error) => dispatch(setAlert(error.msg, "red")));
    }
  }
};

// Mot de passe oublié : update mot de passe
export const updPassword = (password, setRedirect) => async (dispatch) => {
  const body = { password };
  const id = window.location.pathname.replace("/forgotten/", "");

  try {
    // get the server's response
    const res = await api.post("/signin/forgotten/" + id, body);
    dispatch(setAlert(res.data.msg, "success", 5000));
    console.log(res.data.redirect);
    setRedirect(res.data.redirect);
  } catch (err) {
    // display the errors (the array of errors called "errors")
    const errors = err.response.data.errors;

    if (errors) {
      // if there are any error : for each error dispatch the set alert with the error message
      // the array of errors generated by the server
      errors.forEach((error) => dispatch(setAlert(error.msg, "red")));
    }
  }
};