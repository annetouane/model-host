// package
import jwt from 'jwt-decode'

// components
import api from "../utilities/api";
import { setAlert } from "./alert";
import { postInputForm } from './formData';
import setAuthToken from "../utilities/setAuthToken";

// actions
import {
  REGISTER_SUCCESS,
  REGISTER_FAIL,
  USER_LOADED,
  AUTH_ERROR,
  LOGIN_SUCCESS,
  LOGIN_FAIL,
  LOGOUT,
  AUTH_TOGGLE,
  DETECT_SAVE,
  SAVE_TOGGLE,
  DETECT_MODEL,
  MODEL_TOGGLE,
  ACCOUNT_TOGGLE
} from "./types";

// load the user each time the main app is updated to check authentication
export const loadUser = () => async (dispatch) => {
  if (localStorage.token) {
    // if there is a token in local storage,
    // sends the token in global header by calling the function setAuthToken
    setAuthToken(localStorage.token);
  }
  try {
    const res = await api.get("http://localhost:5000/");
    dispatch({
      type: USER_LOADED,
      payload: res.data,
    });
  } catch (err) {
    console.log(err.message);
    dispatch({
      type: AUTH_ERROR,
    });
  }
};

// Register User
export const register = (registerData, formData, detectSave, detectModel) => async (dispatch) => {
  try {
    const postInput = formData;
    // get the server's response
    const res = await api.post("/signup", registerData);
    postInput.user = res.data.id

    // if the is a success -> dispatch REGISTER_SUCCESS
    // attach the response to the playload
    dispatch({
      type: REGISTER_SUCCESS,
    });
    
    // send alert check email
    dispatch(
      setAlert(
        res.data.alert.msg,
        res.data.alert.color,
        100000
      )
    );
    
    // 3 scénarios post-login réussi
    if (detectModel) { // if fiscalité -> post input
      dispatch(postInputForm(postInput));
    } else { // si save -> save modal
      const today = new Date();
      const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate(); // why +1 ?
      postInput.nomProjet = `Projet 1 - ${date}`
    }
    dispatch(postInputForm(postInput));
    console.log(postInput)

  } catch (err) {
    console.log(err.response.data.msg)
    if (err.response.data.msg) {
      dispatch(setAlert(err.response.data.msg, err.response.data.color, 10000));
    }
    dispatch({
      type: REGISTER_FAIL,
    });
  }
};

// Login User + save inputs lorsque clic sur fiscalité et renvoi modal dataviz
export const login = (loginData, formData, detectSave, detectModel) => async (dispatch) => {
  try {
    const postInput = formData;
    // sends back the user
    const res = await api.post("/signin", loginData);

    // extrait l'ID du token
    const decodedToken = jwt(res.data.token)
    postInput.user = decodedToken.user.id

    // insert the token in the payload
    dispatch({
      type: LOGIN_SUCCESS,
      payload: res.data, 
    });

    // load user
    dispatch(loadUser());

    // 3 scénarios post-login réussi
    if (detectModel) { // if fiscalité -> post input
      dispatch(postInputForm(postInput));
      dispatch(modelModalToggle(true));
    } else if (detectSave) { // si save -> save modal
      dispatch(saveModalToggle(true));
    } else {
      console.log("nomal") // sinon ferme la modal (dans la fonction)
    }
    dispatch({
      type: AUTH_TOGGLE,
      payload: false,
    });

  } catch (err) {
    if (err.response.data.msg) {
      dispatch(setAlert(err.response.data.msg, err.response.data.color));
    }
    dispatch({
      type: LOGIN_FAIL,
    });
  }
};

// Mot de passe oublié : envoi email
export const forgotten = (email) => async (dispatch) => {
  const body = { email };

  try {
    // get the server's response
    await api.post("/signin/forgotten", body);
    // if the is a success -> dispatch REGISTER_SUCCESS
    // attach the response to the playload
    dispatch(
      setAlert(
        `A link to reset your password has been sent to : ${email}`,
        "success",
        5000
      )
    );
  } catch (err) {
    console.log('error', err)
    // display the errors (the array of errors called "errors")
    const errors = err.response.data.errors;

    if (errors) {
      // if there are any error : for each error dispatch the set alert with the error message
      // the array of errors generated by the server
      errors.forEach((error) => dispatch(setAlert(error.msg, "red")));
    }
  }
};

// Mot de passe oublié : update mot de passe
export const updPassword = (password, setRedirect) => async (dispatch) => {
  const body = { password };
  const id = window.location.pathname.replace("/forgotten/", "");

  try {
    // get the server's response
    const res = await api.post("/signin/forgotten/" + id, body);
    dispatch(setAlert(res.data.msg, "success", 5000));
    console.log(res.data.redirect);
    setRedirect(res.data.redirect);
  } catch (err) {
    // display the errors (the array of errors called "errors")
    const errors = err.response.data.errors;

    if (errors) {
      // if there are any error : for each error dispatch the set alert with the error message
      // the array of errors generated by the server
      errors.forEach((error) => dispatch(setAlert(error.msg, "red")));
    }
  }
};

// Open Auth Window
export const authToggle = (bool) => (dispatch) => {
  dispatch({ 
    type: AUTH_TOGGLE,
    payload: bool
  });
};

// detect clic sur le bouton save
export const saveModalClic = (bool) => (dispatch) => {
  dispatch({ type: DETECT_SAVE,
    payload: bool 
  });
};

// ouvre la modal save
export const saveModalToggle = (bool) => (dispatch) => {
  dispatch({ 
    type: SAVE_TOGGLE,
    payload: bool
  });
};

// detect clic sur bouton modélisation
export const modelModalClic = (bool) => (dispatch) => {
  dispatch({ 
    type: DETECT_MODEL,
    payload: bool,
  });
};

// ouvre la modal modélisation
export const modelModalToggle = (bool) => (dispatch) => {
  dispatch({ 
    type: MODEL_TOGGLE,
    payload: bool
  });
};

// ouvre la modal mon compte
export const accountModalToggle = (bool) => (dispatch) => {
  dispatch({ 
    type: ACCOUNT_TOGGLE,
    payload: bool
  });
};

// Logout
export const logout = () => (dispatch) => {
  dispatch({ type: LOGOUT });
};
